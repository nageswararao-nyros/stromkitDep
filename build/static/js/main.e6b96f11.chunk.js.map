{"version":3,"sources":["logo.svg","components/login.js","components/home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Login","props","state","name","email","password","conf_password","submitForm","bind","handleChange","e","preventDefault","console","log","this","data","axios","post","then","res","change","target","value","setState","onSubmit","type","onChange","required","Component","Home","href","App","className","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2JAAAA,EAAOC,QAAU,IAA0B,kC,yKCGtBC,E,YACpB,WAAYC,GAAO,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACZC,KAAM,GACNC,MAAO,GACPC,SAAU,GACVC,cAAc,IAGf,EAAKC,WAAa,EAAKA,WAAWC,KAAhB,gBAClB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBAVH,E,wEAaPE,GACVA,EAAEC,iBACFC,QAAQC,IAAI,WAAYC,KAAKZ,OAC7BY,KAAKC,KAAO,CACXZ,KAAMW,KAAKZ,MAAMC,KACjBC,MAAOU,KAAKZ,MAAME,MAClBC,SAAUS,KAAKZ,MAAMG,UAEtBW,IAAMC,KAAK,qDAAqDH,KAAKC,MAAMG,MAAK,SAAAC,GAC/EP,QAAQC,IAAIM,EAAK,mB,mCAGNT,GACV,IAAIU,EAAS,GACbA,EAAOV,EAAEW,OAAOlB,MAAQO,EAAEW,OAAOC,MACjCR,KAAKS,SAASH,K,+BAejB,OACC,6BACC,0CACA,0BAAMI,SAAYV,KAAKP,YACtB,uCACA,2BAAOkB,KAAK,OAAOtB,KAAK,OAAOuB,SAAUZ,KAAKL,aAAckB,UAAQ,IAAG,6BAAK,6BAC5E,wCACA,2BAAOF,KAAK,QAAQtB,KAAK,QAAQuB,SAAUZ,KAAKL,aAAckB,UAAQ,IAAG,6BAAK,6BAC9E,2CACA,2BAAOF,KAAK,WAAWtB,KAAK,WAAWuB,SAAUZ,KAAKL,aAAckB,UAAQ,IAAG,6BAAK,6BACpF,6CACA,2BAAOF,KAAK,WAAWtB,KAAK,gBAAgBuB,SAAUZ,KAAKL,aAAckB,UAAQ,IAAG,6BAAK,6BACzF,2BAAOF,KAAK,SAAStB,KAAK,GAAGmB,MAAM,iB,GAxDJM,aCAdC,E,iLAEpB,OACC,6BACC,4DADD,IACsC,uBAAGC,KAAK,UAAR,uB,GAJNF,a,6BCiBnBG,MAbf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,IAAD,KACA,yBAAKA,UAAU,OACd,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWN,IACjC,kBAAC,IAAD,CAAOI,OAAK,EAACC,KAAK,SAASC,UAAWnC,QCDzBoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7B,MAAK,SAAA8B,GACjCA,EAAaC,kB","file":"static/js/main.e6b96f11.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React, {Component} from 'react';\nimport axios from 'axios';\n\nexport default class Login extends Component {\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tname: '',\n\t\t\temail: '',\n\t\t\tpassword: '',\n\t\t\tconf_password:''\n\t\t}\n\n\t\tthis.submitForm = this.submitForm.bind(this)\n\t\tthis.handleChange = this.handleChange.bind(this)\n\t}\n\n\tsubmitForm(e){\n\t\te.preventDefault()\n\t\tconsole.log(\"succeess\", this.state)\n\t\tthis.data = {\n\t\t\tname: this.state.name,\n\t\t\temail: this.state.email,\n\t\t\tpassword: this.state.password\n\t\t}\n\t\taxios.post('https://depseminar-dd44f.firebaseio.com/users.json',this.data).then(res=>{\n\t\t\tconsole.log(res, \"----------\")\n\t\t})\n\t}\n\thandleChange(e) {\n    let change = {}\n    change[e.target.name] = e.target.value\n    this.setState(change)\n  }\n\n  /*ireAuth(){\n  console.log(\"success\")\n  var email = \"saisivaalugolu@gmail.com\"\n  var password = \"9704347561\"\n  firebase.auth().signInWithEmailAndPassword(email, password).then(res=>{\n  console.log(\"res\", res)\n}).catch(err=>{\n\tconsole.log(err)\n})\n}*/\n\nrender(){\n\treturn(\n\t\t<div>\n\t\t\t<p>Signup Page</p>\n\t\t\t<form onSubmit = {this.submitForm}>\n\t\t\t\t<label>Name</label>\n\t\t\t\t<input type=\"text\" name=\"name\" onChange={this.handleChange} required /><br/><br/>\n\t\t\t\t<label>Email</label>\n\t\t\t\t<input type=\"email\" name=\"email\" onChange={this.handleChange} required /><br/><br/>\n\t\t\t\t<label>Password</label>\n\t\t\t\t<input type=\"password\" name=\"password\" onChange={this.handleChange} required /><br/><br/>\n\t\t\t\t<label>C.Password</label>\n\t\t\t\t<input type=\"password\" name=\"conf_password\" onChange={this.handleChange} required /><br/><br/>\n\t\t\t\t<input type=\"submit\" name=\"\" value=\"SUBMIT\" />\n\t\t\t</form>\n\t\t</div>\n\t)\n\t}\n}","import React, {Component} from 'react';\n// import axios from 'axios';\n\nexport default class Home extends Component {\nrender(){\n\treturn(\n\t\t<div>\n\t\t\t<p>Welcome to nyros technologies</p> <a href=\"/login\" >Click to Login</a>\n\t\t</div>\n\t)\n\t}\n}","import React from 'react';\nimport Login from './components/login'\nimport Home from './components/home'\nimport logo from './logo.svg';\nimport './App.css';\nimport { Route, BrowserRouter } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n      <div className=\"App\">\n       <Route exact path=\"/\" component={Home} />\n       <Route exact path=\"/login\" component={Login} />\n      </div>\n    </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}